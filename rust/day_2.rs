/* 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
By considering the terms in the Fibonacci sequence that do not exceed the nth term, find the sum of the even-valued terms.
*/
use std::collections::HashMap;

const UPPER_LIMIT: i32 = 4_000_000;
const FIBO_1_2: i32 = 1;

fn main() {    
    let mut map = HashMap::new();
    let num = 3;

    for n in 1..num+1 {
        println!("{}", fibo_num(n, &mut map));
    }
}

fn fibo_num(num: i32, map: &mut HashMap<i32, i32>) -> i32 {
    match num {
        1 | 2 => FIBO_1_2,
        num => {
            if map.contains_key(&num) {
                *map.get(&num).unwrap()
            } else {
            let result = fibo_num(num, map) - fibo_num(num - 1, map);
            map.insert(num, result);
            result
            }
        }
    }
}

// fn make_iterable(num: i32) {
//     for numbers in 1..=num {
//         println!("{}", fibo_num(numbers, &mut map));
//     }
// }
